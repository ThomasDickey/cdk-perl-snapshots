</R>Purpose<!R>
The Cdk Dialog widget allows the user to pick from a number of options
using buttons provided. The dialog box presents a message, and a list of 
options using the buttons.

</R>Construction Options<!R>
A dialog widget is defined using the following syntax. The variable 
</B>$dialogObject<!B> contains the reference to the dialog object.
<C></B>$dialogObject = new Cdk::Dialog ( options );

The options are defined in the following table.

</U>Option      Default Value Type       Purpose<!U>
Mesg        Required      List Ref   This is the message which is displayed 
                                     in the dialog box.
Buttons     Required      List Ref   This is a list of the button labels.
Xpos        Center        Scalar     This is the position of the window on
                                     the X axis.
Ypos        Center        Scalar     This is the position of the window on
                                     the Y axis.
Highlight   Reverse       Scalar     The highlight attribute of the
                                     currently selected button.
Separator   True          Scalar     This Boolean value states whether a
                                     separator will be drawn between the
                                     message and the buttons.
Box         True          Scalar     This Boolean states whether the dialog
                                     box will have a box drawn around it.
Shadow      False         Scalar     This Boolean states whether the dialog
                                     box will have a shadow on the box.

</R>Available Methods<!R>

</B>activate<!B>
Activation of an object means to make the object available for use. The 
following example demonstrates how to activate a dialog widget.
<C></B>$returnValue = $dialogObject->activate ();

The variable </B>$returnValue<!B> contains an integer value representing which 
button was actually selected. The value starts at zero and goes up.

</B>inject<!B>
This function injects a single character into the widget. The following
examples demonstrates how to call the inject method.
<C></B>$dialogObject->inject ( options );

The options are defined in the following table.
</U>Option      Default Value       Type       Purpose<!U>
Shadow      Required             Scalar     The character to inject into the widget.

If you are injecting a special character into the widget, then you can
use a pre-defined value to represent the key.

<C><#UL><#HL(11)><#TT><#HL(14)><#UR>
<C><#VL></U>Key         <#VL>Key Value      <!U><#VL>
<C><#VL>Left Arrow  <#VL>KEY_LEFT       <#VL>
<C><#VL>Right Arrow <#VL>KEY_RIGHT      <#VL>
<C><#VL>Up Arrow    <#VL>KEY_UP         <#VL>
<C><#VL>Down Arrow  <#VL>KEY_DOWN       <#VL>
<C><#VL>Delete      <#VL>KEY_DELETE     <#VL>
<C><#VL>Backspace   <#VL>KEY_BACKSPACE  <#VL>
<C><#VL>Page Up     <#VL>KEY_PPAGE      <#VL>
<C><#VL>Page Down   <#VL>KEY_NPAGE      <#VL>
<C><#VL>Home        <#VL>KEY_HOME       <#VL>
<C><#VL>End         <#VL>KEY_END        <#VL>
<C><#VL>Escape      <#VL>KEY_ESC        <#VL>
<C><#LL><#HL(11)><#BT><#HL(14)><#LR>

</B>set<!B>
Sets or resets certain attributes or features of the widget. The following
example demonstrates how to call the set method.
<C></B>$dialogObject->set ( options );
 
The options are defined in the following table.

</U>Option      Default Value Type       Purpose<!U>
Highlight   Required      Scalar      Changes the current highlight attribute.
Separator   Required      Scalar      Changes the current value for the
                                      separator flag.
Box         True          Scalar      Changes the current value for the box
                                      flag.

</B>draw<!B>
This method draws the object on the screen. The following example 
demonstrates how to call the draw method.
<C></B>$dialogObject->draw ( options );
 
The options are defined in the following table.

</U>Option      Default Value Type       Purpose<!U>
Box         True          Scalar       Draws the window with a box.

</B>erase<!B>
This method removes the object from the screen. This does </B/U>NOT<!B!U> destroy
the object. The following example demonstrates how to call the erase 
method.
<C></B>$dialogObject->erase ();

</B>bind<!B>
The bind method binds keys to events. The binding is specific to the 
individual objects. The following example demonstrates how to call the 
bind method.
<C></B>$dialogObject->bind ( options );

The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Key         Required          Scalar      This is the character to bind the 
                                          event to.
Function    Required          Scalar      This is the name of the callback 
                                          function.

</B>preProcess<!B>
The </B>preProcess<!B> function sets a process to be run before the key entered
is processed. If this function returns a value of 0, then the key injected
into the widget will not be processed; otherwise the character will be
processed as normal.  The following example demonstrates how to call the
preProcess method.
<C></B>$dialogObject->preProcess ( options );

The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Function    Required            Scalar     This is the name of the
                                           callback function.

To create a pre-process callback the following code segment demonstrates
how to do it properly.

<C></B>$alphalistObject->preProcess ('Function' => sub { callback (@_); });

Notice that the array </B>@_<!B> is passed into the function called
</B>callback<!B>. This is done because when the callback process is 
called the key which was pressed is passed into the perl subroutine.
Since we nest the call-back function inside an anonymous subroutine,
we need to pass the array </B>@_<!B> to the call-back function. If
the key given to the call-back function is a non alphanumeric key
then a predefined value will be given to the function. The following
table describes the values passed into the function.

<C><#UL><#HL(11)><#TT><#HL(14)><#UR>
<C><#VL></U>Key         <#VL>Key Value      <!U><#VL>
<C><#VL>Left Arrow  <#VL>KEY_LEFT       <#VL>
<C><#VL>Right Arrow <#VL>KEY_RIGHT      <#VL>
<C><#VL>Up Arrow    <#VL>KEY_UP         <#VL>
<C><#VL>Down Arrow  <#VL>KEY_DOWN       <#VL>
<C><#VL>Delete      <#VL>KEY_DELETE     <#VL>
<C><#VL>Backspace   <#VL>KEY_BACKSPACE  <#VL>
<C><#VL>Page Up     <#VL>KEY_PPAGE      <#VL>
<C><#VL>Page Down   <#VL>KEY_NPAGE      <#VL>
<C><#VL>Home        <#VL>KEY_HOME       <#VL>
<C><#VL>End         <#VL>KEY_END        <#VL>
<C><#VL>Escape      <#VL>KEY_ESC        <#VL>
<C><#LL><#HL(11)><#BT><#HL(14)><#LR>

If the pre-process function returns a value of 0 the key hit will
not be injected into the widget. This allows the programmer to
selectively pick which characters will or will not get injected
into the widget.

The </B>postProcess<!B> function sets a process to be run before the key entered
is processed. If this function returns a value of 0, then the key injected
into the widget will not be processed; otherwise the character will be
processed as normal.  The following example demonstrates how to call the
postProcess method.
<C></B>$dialogObject->postProcess ( options );

The options are defined in the following table.

</U>Option      Default Value       Type       Purpose<!U>
Function    Required            Scalar     This is the name of the
                                           callback function.

To create a post-process callback the following code segment demonstrates
how to do it properly.

<C></B>$alphalistObject->postProcess ('Function' => sub { callback (@_); });

Notice that the array </B>@_<!B> is passed into the function called
</B>callback<!B>. This is done because when the callback process is 
called the key which was pressed is passed into the perl subroutine.
Since we nest the call-back function inside an anonymous subroutine,
we need to pass the array </B>@_<!B> to the call-back function. If
the key given to the call-back function is a non alphanumeric key
then a predefined value will be given to the function. The following
table describes the values passed into the function.

<C><#UL><#HL(11)><#TT><#HL(14)><#UR>
<C><#VL></U>Key         <#VL>Key Value      <!U><#VL>
<C><#VL>Left Arrow  <#VL>KEY_LEFT       <#VL>
<C><#VL>Right Arrow <#VL>KEY_RIGHT      <#VL>
<C><#VL>Up Arrow    <#VL>KEY_UP         <#VL>
<C><#VL>Down Arrow  <#VL>KEY_DOWN       <#VL>
<C><#VL>Delete      <#VL>KEY_DELETE     <#VL>
<C><#VL>Backspace   <#VL>KEY_BACKSPACE  <#VL>
<C><#VL>Page Up     <#VL>KEY_PPAGE      <#VL>
<C><#VL>Page Down   <#VL>KEY_NPAGE      <#VL>
<C><#VL>Home        <#VL>KEY_HOME       <#VL>
<C><#VL>End         <#VL>KEY_END        <#VL>
<C><#VL>Escape      <#VL>KEY_ESC        <#VL>
<C><#LL><#HL(11)><#BT><#HL(14)><#LR>
</B>raise<!B>
The raise method raises the widget to the top of the screen. This means if 
there were any widgets obscuring part of the view, raising the object would
bring the complete object into view. The following example demonstrates how
to call the raise method.
<C></B>$dialogObject->raise();

</B>lower<!B>
The lower method lowers the object so it doesn't obscure the view of any 
other objects. The following example demonstrates how to call the lower 
method.
<C></B>$dialogObject->lower();

</B>register<!B>
The register method registers the object to the default screen. This does </R>NOT<!R>
have to be called since the objects are registered automatically. This method
should be called if the </B>unregister<!B> method was called. The following
example demonstrates how to call the register method.
<C></B>$dialogObject->register();

</B>unregister<!B>
The unregister method should be called when a widget, which is part of the
default screen, needs to be taken away temporarily. This does not delete or
free the object, it just unmaps it from any future screen refreshes. The 
object can be registered by calling the </B>register<!B> method. The 
following example demonstrates how to call the unregister method.
<C></B>$dialogObject->unregister();

</B>getwin<!B>
This method returns a pointer to the window of the object. Not much use for 
this yet. It will be useful in the future when the drawing methods are added.
The following example demonstrates how to call the getwin method.
<C></B>$dialogObject->getwin();

</R>Default Key Bindings<!R>
</U>Key               Action<!U>
Left Arrow        Highlights the button to the left of the currently 
                  highlighted button.
Right Arrow       Highlights the button to the right of the currently 
                  highlighted button.
Space             Highlights the button to the right of the currently 
                  highlighted button.
Return            Exits the widget and returns a value representing the
                  selected button. The range of the value is from 0 to
                  the number of buttons -1.
Tab               Exits the widget and returns a value representing the
                  selected button. The range of the value is from 0 to
                  the number of buttons -1.
Escape            Exits the dialog widget and returns undef.
CTRL-R            Refreshes the screen.

</R>Tips & Tricks<!R>
<B=*>If you pass the dialog with no message and no separator, the 
     dialog box appears be a tool bar.

</R>Physical Restrictions<!R>
</U>Restriction                    Value<!U>
Maximum message rows.            50
Maximum dialog buttons.          25

</R>Example Use Of The Widget<!R>
<F=../examples/dialog>
<C><#HL(70)>
<C>Document Created: June,     1995
<C>Document Revised: November, 1995
<C>Document Revised: January,  1996
<C>Document Revised: June,     1996
